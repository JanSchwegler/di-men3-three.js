import"./modulepreload-polyfill-B5Qt9EMX.js";import{$ as k,S as C,W as x,P as L,h as y,V as E,a2 as M,x as v,j as P,C as m,i as S}from"./three.module-C690gTMf.js";import{S as R}from"./stats.module--VATS4Kh.js";import{g as G}from"./lil-gui.module.min-Bc0DeA9g.js";import{O as T}from"./OrbitControls-Si8ZeTZU.js";import{G as O}from"./GLTFLoader-B2ZjoZW7.js";import{E as W}from"./EXRLoader-B7krg9zO.js";let t,c,d,b,s,g,l,f,h,u;const o=document.querySelector("#canvas"),_=new W,w=new k;w.onProgress=function(e,n,a){const i=n/a*100;console.log(`Progress: ${i.toFixed(2)}% (${n} of ${a})`)};function j(){if(!o){console.error("Canvas element not found.");return}t=new C,d=new x({antialias:!0,alpha:!0,premultipliedAlpha:!1,canvas:o}),c=new L(55,o.clientWidth/o.clientHeight,.1,100),c.position.set(0,.3,3),g=new R,document.body.appendChild(g.dom),s=new T(c,d.domElement),s.listenToKeyEvents(window),s.enableDamping=!0,s.enablePan=!1,s.enableZoom=!1,new O(w).load("../../models/bunny/12_animations.glb",r=>{u=r.scene,u.position.y-=new y().setFromObject(u).getSize(new E).y*.5,t.add(u)},void 0,r=>{console.error("Error loading bunny:",r)});const n=new M(d);_.load("../../hdri/Sky.exr",r=>{f=n.fromEquirectangular(r).texture,r.dispose()},void 0,r=>{console.error("Error loading HDRI: ",r),reject(r)}),h=new v().load("../../models/bunny/11_textures_gltf/body_BaseColor_1001.png");const i=new P(16777215,2.2);t.add(i),z(),b=new S,d.setAnimationLoop(B),window.addEventListener("resize",p,!1),p()}function z(){l=new G;const e={background:"Color",backgroundOptions:["Color","Transparent","Texture","Environment Map"],color:"#3a2c2e"};l.add(e,"background",e.backgroundOptions).name("Background").onChange(n);function n(a){switch(l.controllers.forEach(i=>{i.property==="color"&&i.destroy()}),a){case"Color":t.background=new m(e.color),l.addColor(e,"color").name("Color").onChange(i=>{t.background=new m(i)});break;case"Transparent":t.background=null;break;case"Texture":t.background=h;break;case"Environment Map":t.background=f;break}}n(e.background)}function B(){b.getDelta(),s.update(),g.update(),d.render(t,c)}function p(){const e=Math.min(window.devicePixelRatio,4),n=Math.round(o.clientWidth*e),a=Math.round(o.clientHeight*e);d.setSize(n,a,!1),o.width=n,o.height=a,c.aspect=o.clientWidth/o.clientHeight,c.updateProjectionMatrix()}j();
